generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model required by NextAuth, with a link to our custom progress model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  progress      UserProgress? // One-to-one relation to UserProgress
}

// Our custom model to store ELO and stats
model UserProgress {
  id            String @id @default(cuid())
  userId        String @unique
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  mathElo           Int @default(1200)
  mathCorrect       Int @default(0)
  mathIncorrect     Int @default(0)
  mathSkipped       Int @default(0)

  physicsElo        Int @default(1200)
  physicsCorrect    Int @default(0)
  physicsIncorrect  Int @default(0)
  physicsSkipped    Int @default(0)
}

// --- The rest of the models are required by the PrismaAdapter for NextAuth ---
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}